package main

import (
	"log"
	"net/http"
	"regexp"

	"github.com/99designs/gqlgen/graphql/handler"
	"github.com/99designs/gqlgen/graphql/playground"
	"github.com/kafugen/ocwcentral/env"
	"github.com/kafugen/ocwcentral/graph/generated"
)

func main() {
	env := env.NewEnvConfig()

	var isOriginAllowed func(origin string) bool
	if env.AppEnv == "LOCAL" {
		isOriginAllowed = func(origin string) bool {
			return origin == "http://127.0.0.1:5173" || origin == "http://localhost:5173"
		}
	} else if env.AppEnv == "DEV" {
		// The origin of the frontend app in dev environment
		// is randomly generated by the Cloudflare pages as a preview URL.
		// Thus, we need to determine the origin dynamically
		// with the regular expression.
		re := regexp.MustCompile(`^https://[a-z0-9]+\.ocwcentral\.pages\.dev$`)
		isOriginAllowed = func(origin string) bool {
			return re.MatchString(origin)
		}
	} else if env.AppEnv == "PROD" {
		isOriginAllowed = func(origin string) bool {
			return origin == "https://ocwcentral.com"
		}
	} else {
		panic("invalid APP_ENV")
	}

	resolver := InitializeResolver()

	srv := handler.NewDefaultServer(generated.NewExecutableSchema(generated.Config{Resolvers: &resolver}))
	http.HandleFunc("/query", func(w http.ResponseWriter, r *http.Request) {
		var allowedOrigin string
		if isOriginAllowed(r.Header.Get("Origin")) {
			allowedOrigin = r.Header.Get("Origin")
		}

		w.Header().Set("Access-Control-Allow-Headers", "*")
		w.Header().Set("Access-Control-Allow-Origin", allowedOrigin)
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		srv.ServeHTTP(w, r)
	})
	// Handle playground for LOCAL environment
	if env.AppEnv == "LOCAL" {
		http.Handle("/playground", playground.Handler("GraphQL playground", "/query"))
		log.Printf("connect to http://localhost:%s/playground for GraphQL playground", env.Port)
	}
	log.Fatal(http.ListenAndServe(":"+env.Port, nil))
}
